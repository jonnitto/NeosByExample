prototype(Jonnitto.PrettyEmbedHelper:Content) {
    breakout = ${q(node).property('breakout')}

    enableText = ${q(node).property('enableText')}
    columnRatio = ${q(node).property('ratio')}
    textLeft = ${q(node).property('textLeft')}
    backgroundColor = ${q(node).property('backgroundColor')}

    linkHref = ${q(node).property('linkHref')}
    linkAppearance = ${q(node).property('linkAppearance')}
    linkText = ${q(node).property('linkText') || Translation.translate('readMore', 'read more', [], null, 'Base.Theme')}
    headline = Neos.Neos:Editable {
        property = 'headline'
        block = false
    }
    text = Neos.Neos:Editable {
        property = 'text'
    }

    activateNodeUpdate = ${node.context.inBackend}
    wrapper.@process.onlyIfSingle = ${this.enableText ? null : value}

    renderer.@process {
        nodeUpdateWithOutText = Neos.Fusion:Augmenter {
            @if.set = ${!props.enableText}
            x-data = ${props.activateNodeUpdate ? '{}' : null}
            "x-on:neosnodeupdate.window" = ${props.activateNodeUpdate ? 'liveUpdate.breakout($root, $event.detail)' : null}
        }
        breakout = Neos.Fusion:Augmenter {
            @if.set = ${props.breakout && !props.enableText}
            class = Base.Theme:Helper.BreakoutClass {
                breakout = ${props.breakout}
            }
        }
        textWithContent = afx`
            <Base.Theme:Module.TextWithContent @if={props.enableText} {...props} ratio={props.columnRatio} content={value} />
        `
    }
}
