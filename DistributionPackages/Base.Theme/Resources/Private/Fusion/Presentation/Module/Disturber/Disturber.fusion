prototype(Base.Theme:Module.Disturber) < prototype(Neos.Fusion:Component) {
    @propTypes {
        headline = ${PropTypes.string}
        lead = ${PropTypes.string}
        text = ${PropTypes.string}
        linkHref = ${PropTypes.string}
        linkText = ${PropTypes.string}
        backgroundColor = ${PropTypes.string}
        linkAppearance = ${PropTypes.oneOf(['ghost', 'main', 'minor'])}
        textDark = ${PropTypes.boolean}
        dotsOpacity = ${PropTypes.integer}
        alwaysRenderDots = ${PropTypes.boolean}
        opacity = ${PropTypes.integer}
    }

    @styleguide {
        props {
            headline = 'Headline'
            lead = 'Lead text'
            text = 'Das hier ist der nützlichste und klügste Blindtext der ganzen Welt, weil er dir genau sagt, wann 100 Zeichen vorbei sind (gleich nach der Zahl).'
            linkHref = '#'
            linkText = 'read more'
            backgroundColor = 'neos-dark'
            linkAppearance = 'ghost'
            textDark = false
            opacity = 40

            imageSource = Carbon.Image:Helper.ImageSource {
                outputDummy = true
            }
        }
    }

    integration = false
    activateNodeUpdate = false
    linkAppearance = 'ghost'
    class = null

    minHeight = '40vh'

    _hasImage = ${this.integration ? !!this.image : !!this.imageSource}
    dotsOpacity.@process.fallback = ${Type.isInteger(value) ? value : 0}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        bgset = afx`
            <Carbon.Image:Component.Presentation.SrcSet
                imageSource={props.imageSource}
                @if={!props.integration && props.imageSource}
            />
            <Carbon.Image:Component.SrcSet
                image={props.image}
                @if={props.integration && props.image}
            />
        `
        bgHelper = Base.Theme:Helper.BackgroundColor {
            backgroundColor = ${props._hasImage ? null : props.backgroundColor}
            dark = ${props._hasImage ? !props.textDark : null}
        }
        styleHeight = ${props.minHeight ? 'min-height:' + props.minHeight + ';' : null}
        svgID = ${'disturber-circles' + (this.bgHelper.dark ? '-dark' : '')}

        @if.hasContent = ${this.bgset || props.headline || props.text || props.linkHref}

        _inputFieldClass = ${[props._hasImage ? this.bgHelper.dark ? "bg-black/30" : "bg-white/10" : "bg-transparent", this.bgHelper.dark ? "border-slate-100 placeholder-slate-100 focus:ring-white focus:border-white focus:placeholder-slate-100/60 focus:text-white" : "border-slate-900 placeholder-slate-900 focus:ring-black focus:border-black focus:placeholder-slate-900/60 focus:text-black" ,"appearance-none min-w-0 w-full border-2 py-2 px-4 text-base focus:outline-none"]}

        renderer = afx`
            <div
                class={Carbon.String.merge(props.class, props.bgHelper.class, props.bgset ? props.textDark ? 'text-shadow-white' : 'text-shadow-black' : null, '-disturber -breakout relative overflow-hidden flex flex-col justify-center')}
                style={props.styleHeight}
                x-data={props.activateNodeUpdate}
                "x-on:neosnodeupdate.window"={props.activateNodeUpdate ? 'liveUpdate.disturber($root, $event.detail, $refs)' : null}
            >
                <svg @if={props.dotsOpacity || props.alwaysRenderDots} data-slipstream="body" class='sr-only hidden lg:block' aria-hidden='true'>
                    <defs>
                        <pattern id='disturber-circles' x='0' y='0' width='20' height='20' patternUnits='userSpaceOnUse'>
                            <circle r='2' cx='2' cy='2' fill='#000' />
                        </pattern>
                        <pattern id='disturber-circles-dark' x='0' y='0' width='20' height='20' patternUnits='userSpaceOnUse'>
                            <circle r='2' cx='2' cy='2' fill='#fff' />
                        </pattern>
                    </defs>
                </svg>
                <div
                    @if={props.bgset}
                    aria-hidden='true'
                    class='-disturber__bg lazyload bg-center bg-cover bg-no-repeat bg-fixed absolute top-0 left-0 w-screen h-screen pointer-events-none z-10'
                    data-bgset={props.bgset}
                    data-sizes='auto'
                >
                    <div
                        class='absolute inset-0 opacity-0'
                        style={'background:' + (props.bgHelper.dark ? '#000' : '#fff') + ';opacity:' + (props.opacity/100)}
                        x-ref={props.activateNodeUpdate ? 'background' : null}
                    ></div>
                </div>
                <svg 
                    @if={props.dotsOpacity || props.alwaysRenderDots}
                    class='absolute top-4 right-0 z-20'
                    width='200' height='350' fill='none' viewBox='0 0 200 350'
                    opacity={props.dotsOpacity / 100}
                    aria-hidden='true'
                    x-ref={props.activateNodeUpdate ? 'dotsTop' : null}
                >
                    <rect width='200' height='350' fill={'url(#' + props.svgID + ')'}/>
                </svg>
                <svg
                    @if={props.dotsOpacity || props.alwaysRenderDots}
                    class='absolute bottom-0 left-4 z-20'
                    width='250' height='300' fill='none' viewBox='0 0 250 300'
                    opacity={props.dotsOpacity / 100}
                    aria-hidden='true'
                    x-ref={props.activateNodeUpdate ? 'dotsBottom' : null}
                >
                    <rect width='250' height='300' fill={'url(#' + props.svgID + ')'}/>
                </svg>
                <div class='z-30 flex flex-col place-content-center place-items-center px-8 py-16'>
                    <Base.Theme:Block.HeadlineAndLead
                        {...props}
                        onMainBg={!props.bgset && props.bgHelper.onMainBg}
                    />
                    <p @if={props.text} class='text-center mt-10 max-w-prose px-safe'>{props.text}</p>
                    <Base.Theme:Atom.Link
                        appearance={props.linkAppearance}
                        href={props.linkHref}
                        content={props.linkText}
                        dark={props.bgHelper.dark}
                        class='mt-10'
                        x-ref={props.activateNodeUpdate ? 'button' : null}
                    />
                </div>
            </div>
        `
    }
}
